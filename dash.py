import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

# üö® DEVE SER O PRIMEIRO COMANDO STREAMLIT
st.set_page_config(page_title="Dashboard de Recursos Humanos", layout="wide")

# üé® Estilo visual inspirado no Spotify
st.markdown("""
    <style>
        /* Estilo geral para a descri√ß√£o */
        .descricao-hover {
            transition: all 0.3s ease-in-out;
            padding: 5px;
            background-color: rgba(255, 255, 255, 0.2);
            border-radius: 5px;
        }

        .descricao-hover:hover {
            transform: scale(1.3); /* Aumenta o tamanho da descri√ß√£o ao passar o mouse */
            font-size: 2em; /* Aumenta ainda mais o tamanho da fonte */
            color: #1DB954; /* Cor caracter√≠stica do Spotify */
            font-weight: bold; /* Deixa o texto mais destacado */
            padding: 10px;
            background-color: rgba(255, 255, 255, 0.4); /* Fundo mais suave */
        }

        /* Fundo da √°rea principal */
        .main {
            background-color: #121212; /* Cor escura como o fundo do Spotify */
            color: white;
        }

        /* Sidebar estilo Spotify */
        section[data-testid="stSidebar"] {
            background-color: #181818;
            color: white;
        }

        /* Cor do texto e widgets na sidebar */
        section[data-testid="stSidebar"] label,
        section[data-testid="stSidebar"] span,
        section[data-testid="stSidebar"] div,
        section[data-testid="stSidebar"] input,
        section[data-testid="stSidebar"] select {
            color: white !important;
        }

        /* Estilo dos gr√°ficos */
        .plotly-graph-div {
            background-color: #121212; /* Cor de fundo escuro para os gr√°ficos */
        }
        
        /* Anima√ß√µes para os gr√°ficos */
        .plotly-graph-div .plotly {
            transition: all 0.3s ease-in-out;
        }

        .plotly-graph-div:hover {
            transform: scale(1.05); /* Efeito de zoom ao passar o mouse sobre os gr√°ficos */
        }
    </style>
""", unsafe_allow_html=True)

# üöÄ Fun√ß√£o principal do app
def app():
    st.title("üìä Dashboard de Recursos Humanos")

    # Carregar os dados do CSV
    data = pd.read_csv('rh.csv')

    # üéõÔ∏è Sidebar com filtros
    st.sidebar.header("üß© Filtros")
    sexo_filter = st.sidebar.multiselect('Selecione o Sexo', options=data['Sexo'].unique(), default=data['Sexo'].unique())
    departamento_filter = st.sidebar.multiselect('Selecione o Departamento', options=data['Departamento'].unique(), default=data['Departamento'].unique())
    cargo_filter = st.sidebar.multiselect('Selecione o Cargo', options=data['Cargo'].unique(), default=data['Cargo'].unique())
    estado_civil_filter = st.sidebar.multiselect('Selecione o Estado Civil', options=data['Estado Civil'].unique(), default=data['Estado Civil'].unique())
    escolaridade_filter = st.sidebar.multiselect('Selecione o N√≠vel de Escolaridade', options=data['N√≠vel Escolaridade'].unique(), default=data['N√≠vel Escolaridade'].unique())
    cidade_filter = st.sidebar.multiselect('Selecione a Cidade', options=data['Cidade'].unique(), default=data['Cidade'].unique())

    # Aplicando os filtros aos dados
    filtered_data = data[
        (data['Sexo'].isin(sexo_filter)) &
        (data['Departamento'].isin(departamento_filter)) &
        (data['Cargo'].isin(cargo_filter)) &
        (data['Estado Civil'].isin(estado_civil_filter)) &
        (data['N√≠vel Escolaridade'].isin(escolaridade_filter)) &
        (data['Cidade'].isin(cidade_filter))
    ]

    st.success("‚úÖ Dados carregados com sucesso!")

    # üìä Layout dos gr√°ficos
    col1, col2 = st.columns(2)

    # Gr√°fico 1: Gr√°fico de Pizza - Distribui√ß√£o por Sexo
    col1.subheader("üìä Distribui√ß√£o por Sexo", help="Este gr√°fico mostra a distribui√ß√£o dos funcion√°rios por sexo, ajudando na an√°lise de diversidade.")
    sexo_counts = filtered_data['Sexo'].value_counts()
    fig1 = go.Figure(data=[go.Pie(labels=sexo_counts.index, values=sexo_counts, hole=0.3)])
    fig1.update_layout(
        title="Distribui√ß√£o por Sexo",
        margin=dict(t=0, b=0, l=0, r=0),
        template="plotly_dark"  # Estilo escuro para o gr√°fico
    )
    col1.plotly_chart(fig1, use_container_width=True)

    # Gr√°fico 2: Gr√°fico de Barras - Sal√°rio M√©dio por Departamento
    col2.subheader("üìä Sal√°rio M√©dio por Departamento", help="Este gr√°fico exibe o sal√°rio m√©dio por departamento, facilitando compara√ß√µes entre diferentes √°reas.")
    salario_medio_departamento = filtered_data.groupby('Departamento')['Salario'].mean().sort_values()
    fig2 = px.bar(salario_medio_departamento.reset_index(), x='Departamento', y='Salario', color='Departamento',
                  color_discrete_sequence=px.colors.sequential.Viridis, title="Sal√°rio M√©dio por Departamento")
    fig2.update_layout(template="plotly_dark")  # Estilo escuro para o gr√°fico
    col2.plotly_chart(fig2, use_container_width=True)

    # Gr√°fico 3: Gr√°fico de Dispers√£o - Idade x Sal√°rio
    col1.subheader("üìä Idade x Sal√°rio", help="Este gr√°fico mostra a rela√ß√£o entre idade e sal√°rio, destacando como a idade influencia o sal√°rio.")
    fig3 = px.scatter(filtered_data, x='Idade', y='Salario', color='Sexo', title="Idade vs Sal√°rio",
                      color_discrete_sequence=px.colors.sequential.Plasma)
    fig3.update_layout(template="plotly_dark")  # Estilo escuro para o gr√°fico
    col1.plotly_chart(fig3, use_container_width=True)

    # Gr√°fico 4: Gr√°fico de Linhas - Tempo de Empresa M√©dio por Cargo
    col2.subheader("üìä Tempo de Empresa M√©dio por Cargo", help="Este gr√°fico mostra o tempo m√©dio de perman√™ncia dos funcion√°rios por cargo.")
    tempo_empresa_medio_cargo = filtered_data.groupby('Cargo')['Tempo Empresa (anos)'].mean().sort_values()
    fig4 = px.line(tempo_empresa_medio_cargo.reset_index(), x='Cargo', y='Tempo Empresa (anos)', markers=True,
                   line_shape="spline", color_discrete_sequence=["#1DB954"], title="Tempo M√©dio de Empresa por Cargo")
    fig4.update_layout(template="plotly_dark")  # Estilo escuro para o gr√°fico
    col2.plotly_chart(fig4, use_container_width=True)

# ‚ñ∂Ô∏è Executar app
if __name__ == '__main__':
    app()
